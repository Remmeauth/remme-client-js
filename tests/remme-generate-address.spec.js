const {sha512, sha256}= require ("../packages/remme-utils");
const {generateAddress, generateSettingsAddress} = require ("../packages/remme-utils");
const expect = require("chai").expect;
const { PATTERNS } = require("../packages/remme-utils");

describe("Generate Address", () => {

    const defaultFamilyName = 'abcdifj';

    it('Verify generateAddress by sha512 algorithm', () => {
        const address = generateAddress('abcdifj', sha512(""));
        expect(address.search(PATTERNS.ADDRESS) === -1).to.be.false;
    });

    it('Address is generated by sha256 algorithm', () => {
        const address = generateAddress('abcdifj', sha256(""));
        expect(address.search(PATTERNS.ADDRESS) === -1).to.be.false;
    });

    it('Address should be generated by sha512 algorithm',() => {
        const address = generateAddress('abcdifj', sha512(""));
        expect(address.search(PATTERNS.ADDRESS) === 0).to.be.true;
    });

    it('Address should be generated by sha256 algorithm',() => {
        const address = generateAddress('abcdifj', sha256(""));
        expect(address.search(PATTERNS.ADDRESS) === 0).to.be.true;
    });

    it('Verify incorrect address by PATTERN', ()=> {
        const address = 'zzxxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczczxczxzxzxzxzx';
        expect(address.search(PATTERNS.ADDRESS) === -1).to.be.true;
    });

    it('If the keys are different - addresses are different too',() => {
        const address1 = {
            address : generateAddress('abc', sha512('123')),
        };
        const address2 = {
            address : generateAddress('abc', sha256('123')),
        };
        expect(address1).to.not.equal(address2);
    });

    it('Get Address without parameters', () => {
        const address = generateAddress('', '');
        expect(address.search(PATTERNS.ADDRESS) === 0).to.be.true;
    });

    it('Generate Settings Address', () => {
        const publicKey = 'test';
        const address = generateSettingsAddress(publicKey);
        expect(!!PATTERNS.ADDRESS.test(address)).to.be.true;
    });

});